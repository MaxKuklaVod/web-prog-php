// –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
const BOARD_WIDTH = 24;  // –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
const BOARD_HEIGHT = 15; // –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
const NUM_MINES = Math.floor(BOARD_WIDTH * BOARD_HEIGHT * 0.15); // 15% –∫–ª–µ—Ç–æ–∫ ‚Äî —ç—Ç–æ –º–∏–Ω—ã

let board = [];
let minePositions = [];
let cursor = { x: 0, y: 0 };
let firstClick = true;

const gameBoard = document.getElementById("game-board");

// –°–æ–±—ã—Ç–∏—è
document.addEventListener("mine.start", (event) => {
    console.log("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
});

document.addEventListener("mine.step", (event) => {
    const { x, y } = event.detail;
    console.log(`–•–æ–¥ –∏–≥—Ä–æ–∫–∞: (${x}, ${y})`);
});

document.addEventListener("mine.end", (event) => {
    console.log(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${event.detail}`);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π #game-board –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
function updateBoardStyle() {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º CSS-—Å–≤–æ–π—Å—Ç–≤–∞
    gameBoard.style.gridTemplateColumns = `repeat(${BOARD_WIDTH}, 40px)`;
    gameBoard.style.gridTemplateRows = `repeat(${BOARD_HEIGHT}, 40px)`;
}

function generateBoard() {
    board = Array.from({ length: BOARD_HEIGHT }, () =>
        Array.from({ length: BOARD_WIDTH }, () => ({
            mine: false,
            open: false,
            flagged: false,
            adjacent: 0
        }))
    );

    gameBoard.innerHTML = "";
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        for (let x = 0; x < BOARD_WIDTH; x++) {
            const cell = document.createElement("div");
            cell.className = "cell";
            cell.dataset.x = x;
            cell.dataset.y = y;
            cell.addEventListener("click", () => openCell(x, y));
            cell.addEventListener("contextmenu", (e) => {
                e.preventDefault();
                toggleFlag(x, y);
            });
            gameBoard.appendChild(cell);
        }
    }

    updateBoardStyle(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
}

function placeMines(excludeX, excludeY) {
    minePositions = [];
    while (minePositions.length < NUM_MINES) {
        const x = Math.floor(Math.random() * BOARD_WIDTH);
        const y = Math.floor(Math.random() * BOARD_HEIGHT);
        if ((x !== excludeX || y !== excludeY) && !board[y][x].mine) {
            board[y][x].mine = true;
            minePositions.push({ x, y });
        }
    }

    calculateAdjacents();
}

function calculateAdjacents() {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1], [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];

    for (let y = 0; y < BOARD_HEIGHT; y++) {
        for (let x = 0; x < BOARD_WIDTH; x++) {
            if (board[y][x].mine) continue;

            directions.forEach(([dx, dy]) => {
                const nx = x + dx;
                const ny = y + dy;
                if (nx >= 0 && ny >= 0 && nx < BOARD_WIDTH && ny < BOARD_HEIGHT && board[ny][nx].mine) {
                    board[y][x].adjacent++;
                }
            });
        }
    }
}



function toggleFlag(x, y) {
    const cell = board[y][x];
    if (cell.open) return;

    cell.flagged = !cell.flagged;
    const cellElement = getCellElement(x, y);
    cellElement.classList.toggle("flag");
    cellElement.textContent = cell.flagged ? "üö©" : "";
}

function getCellElement(x, y) {
    return document.querySelector(`.cell[data-x='${x}'][data-y='${y}']`);
}

function revealMines() {
    minePositions.forEach(({ x, y }) => {
        const cellElement = getCellElement(x, y);
        cellElement.textContent = "üí£";
        cellElement.classList.add("open");
    });
}

function checkWin() {
    let openedCells = 0;
    for (let y = 0; y < BOARD_HEIGHT; y++) {
        for (let x = 0; x < BOARD_WIDTH; x++) {
            if (board[y][x].open) openedCells++;
        }
    }
    if (openedCells === BOARD_WIDTH * BOARD_HEIGHT - NUM_MINES) {
        alert("You Win!");
    }
}

function highlightCursor() {
    document.querySelectorAll(".cell").forEach(cell => cell.classList.remove("highlight"));
    getCellElement(cursor.x, cursor.y).classList.add("highlight");
}

document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowUp") cursor.y = Math.max(0, cursor.y - 1);
    if (e.key === "ArrowDown") cursor.y = Math.min(BOARD_HEIGHT - 1, cursor.y + 1);
    if (e.key === "ArrowLeft") cursor.x = Math.max(0, cursor.x - 1);
    if (e.key === "ArrowRight") cursor.x = Math.min(BOARD_WIDTH - 1, cursor.x + 1);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —è—á–µ–π–∫–∏
    if (e.key === "Enter" || e.key === " ") {
        if (e.ctrlKey) {
            toggleFlag(cursor.x, cursor.y);
        } else {
            openCell(cursor.x, cursor.y);
        }
    }

    highlightCursor();
});
generateBoard();
highlightCursor();

function openCell(x, y) {
    const cell = board[y][x];
    if (cell.flagged) return;

    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –Ω–µ–π, –æ—Ç–∫—Ä—ã—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ
    if (cell.open) {
        openAdjacentCells(x, y, skipFlags = true);
        return;
    }

    if (firstClick) {
        placeMines(x, y);
        firstClick = false;

        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ mine.start
        const startEvent = new CustomEvent("mine.start");
        document.dispatchEvent(startEvent);
    }

    cell.open = true;
    const cellElement = getCellElement(x, y);
    cellElement.classList.add("open");
    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ mine.step
    const stepEvent = new CustomEvent("mine.step", {
        detail: { x, y }
    });
    document.dispatchEvent(stepEvent);

    if (cell.mine) {
        cellElement.textContent = "üí£";
        alert("Game Over!");  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
        revealMines();

        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ mine.end —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º "lose"
        const endEvent = new CustomEvent("mine.end", {
            detail: "lose"
        });
        document.dispatchEvent(endEvent);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
        setTimeout(() => {
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        }, 1000);

        return;
    }

    if (cell.adjacent > 0) {
        cellElement.textContent = cell.adjacent;
    } else {
        openAdjacentCells(x, y);
    }

    checkWin();
}


function openAdjacentCells(x, y, skipFlags = false) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1], [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];

    directions.forEach(([dx, dy]) => {
        const nx = x + dx;
        const ny = y + dy;

        if (
            nx >= 0 && ny >= 0 &&
            nx < BOARD_WIDTH && ny < BOARD_HEIGHT &&
            !board[ny][nx].open && // –Ø—á–µ–π–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞
            (!skipFlags || !board[ny][nx].flagged) // –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ñ–ª–∞–≥–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        ) {
            openCell(nx, ny);
        }
    });
}
